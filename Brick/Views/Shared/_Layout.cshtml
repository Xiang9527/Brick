<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Brick</title>
    @Styles.Render("~/Content/css")
    @Scripts.Render("~/bundles/modernizr")

    <style>
        * {
            padding: 0;
            margin: 0;
        }

        canvas {
            background: #eee;
            display: block;
            margin: 0 auto;
        }
    </style>

</head>
<body>
    <canvas id="myCanvas" width="960" height="640"></canvas>

    <script>
        var canvas = document.getElementById("myCanvas");
        var ctx = canvas.getContext("2d");
        var x = canvas.width / 2;
        var y = canvas.height - 30;
        var h = 0;
        var dx = 2;
        var dy = -2;
        var paddleHeight = 10;
        var paddleWidth = 75;
        var paddleX = (canvas.width - paddleWidth) / 2;
        var rightPressed = false;
        var leftPressed = false;
        var ballRadius = 6;
        //磚塊
        var brickRowCount = 3;
        var brickColumnCount = 6;
        var brickWidth = 125;
        var brickHeight = 30;
        var brickPadding = 20;
        var brickOffsetTop = 50;
        var brickOffsetLeft = 50;
        var bricks = [];
        var total = 0;
        var lives = 1;
        for (c = 0; c < brickColumnCount; c++) {
            bricks[c] = [];
            for (r = 0; r < brickRowCount; r++) {
                switch (r) {
                    case 0:
                        bricks[c][r] = { x: 0, y: 0, h: 0, status: 1 };
                        break;
                    case 1:
                        bricks[c][r] = { x: 0, y: 0, h: 2, status: 1 };
                        break;
                    case 2:
                        bricks[c][r] = { x: 0, y: 0, h: 1, status: 1 };
                        break;
                }
                
            }
        }

        document.addEventListener("mousemove", mouseMoveHandler, false);

        function mouseMoveHandler(e) {
            var relativeX = e.clientX - canvas.offsetLeft;
            if (relativeX > 0 && relativeX < canvas.width) {
                paddleX = relativeX - paddleWidth / 2;
            }
        }

        function drawPaddle() {
            ctx.beginPath();
            ctx.rect(paddleX, canvas.height - paddleHeight, paddleWidth, paddleHeight);
            ctx.fillStyle = "#000000";
            ctx.fill();
            ctx.closePath();
        }

        function drawBricks() {
            for (c = 0; c < brickColumnCount; c++) {
                for (r = 0; r < brickRowCount; r++) {
                    if (bricks[c][r].status == 1) {
                        var brickX = (c * (brickWidth + brickPadding)) + brickOffsetLeft;
                        var brickY = (r * (brickHeight + brickPadding)) + brickOffsetTop;
                        bricks[c][r].x = brickX;
                        bricks[c][r].y = brickY;
                        ctx.beginPath();
                        ctx.rect(brickX, brickY, brickWidth, brickHeight);
                        switch (bricks[c][r].h)
                        {
                            case 0:
                                ctx.fillStyle = "#ff0000";
                                break;
                            case 1:
                                ctx.fillStyle = "#ffff00";
                                break;
                            case 2:
                                ctx.fillStyle = "#008000";
                                break;
                        }
                        ctx.fill();
                        ctx.closePath();
                    }
                }
            }
        }

        function collisionDetection() {
            for (c = 0; c < brickColumnCount; c++) {
                for (r = 0; r < brickRowCount; r++) {
                    var b = bricks[c][r];
                    if (b.status == 1) {
                        if (x >= b.x && x <= b.x + brickWidth && y >= b.y && y <= b.y + brickHeight) {
                            dy = -dy;
                            if (b.x - 4 <= x && x <= b.x + 4 ) {
                                dx = -dx;
                                dy = -dy
                            }
                            if (b.x + brickWidth - 4 <= x && x <= b.x + brickWidth + 4) {
                                dx = -dx;
                                dy = -dy
                            }
                            switch (b.h) {
                                case 0:
                                    b.status = 0;
                                    break;
                                case 1:
                                    b.h = 0;
                                    break;
                                case 2:
                                    b.h = 1;
                                    break;
                            }
                            
                            total++;
                            if (total == 36) {
                                alert("恭喜破關！");
                                document.location.reload();
                            }
                        }
                    }
                }
            }
        }

        function draw() {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            ctx.beginPath();
            ctx.arc(x, y, ballRadius, 0, Math.PI * 2);
            ctx.fillStyle = "#0095DD";
            ctx.fill();
            ctx.closePath();
            drawPaddle();
            drawBricks();
            collisionDetection();
            if (x + dx > canvas.width - ballRadius || x + dx < ballRadius) {
                dx = -dx;
            }
            if (y + dy < ballRadius) {
                dy = -dy;
            } else if (y + dy > canvas.height - ballRadius) {
                if (x > paddleX && x < paddleX + paddleWidth) {
                    dy = -dy;
                }
                else {
                    lives--;
                    if (lives==0) {
                        alert("遊戲結束！");
                        document.location.reload();
                    }
                    else {
                        x = canvas.width / 2;
                        y = canvas.height - 30;
                        dx = 2;
                        dy = -2;
                        paddleX = (canvas.width - paddleWidth) / 2;
                    }
                }
            }
            if (rightPressed && paddleX < canvas.width - paddleWidth) {
                paddleX += 7;
            }
            else if (leftPressed && paddleX > 0) {
                paddleX -= 7;
            }
            x += dx;
            y += dy;
        }
        setInterval(draw, 10);
    </script>


    <div>
        @RenderBody()
    </div>

    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/bundles/bootstrap")
    @RenderSection("scripts", required: false)
</body>
</html>
